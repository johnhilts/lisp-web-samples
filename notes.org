* Sameple Web Dev Code

* AJAX 
** GET handler that takes optional args and returns a JSON payload
** POST handler that takes multiple args and returns 201, etc

* Form
** Name text input
** Select 
** Checkbox
** Submit button
** post to AJAX handler
** Client side validation 
** Server side validation

* JS Explorations
** moment.js
-- download from here: https://momentjs.com/downloads/moment.js
** geolocation

* JS Macros
** A very poor man's jsx
I want to take something like this:
#+BEGIN_SRC lisp
(ps (defun some-js-stuff ()
 (let ((my-table  (chain document (get-element-by-id "my-table"))))
  (dolist (name names)
   (js-html (tr (td name))))))) ; this renders as <tr><td>John</td></tr> using "html" macro

(defun html-output-using-cl-who ()
(:html
(:body
(:table :id "my-table"))))
#+END_SRC

*** Brainstorming
 (tr (td name))

 (tr (td name)) <-- (listp tags) (atom (car tags)) (listp (cdr tags)) => add "<" tag recursion
 ((td name)) <-- (listp tags) (listp (car tags)) => recursion
 (td name) <-- (listp tags) (atom (car tags)) (listp (cdr tags)) => same as 1st condition
 (name) <-- (listp tags) (atom (car tags)) (null (cdr tags)) => we've found a lonely atom add atom

**** Using DOM API
***** create a table
#+BEGIN_SRC javascript
var sampleDiv = document.getElementById("sample-div")
var sampleTd = document.createElement("td")
var node = document.createTextNode("Name: John")
sampleTd.appendChild(node)
var sampleTr = document.createElement("tr")
sampleTr.appendChild(sampleTd)
var sampleTable = document.createElement("table")
sampleTable.appendChild(sampleTr)
sampleDiv.appendChild(sampleTable)
#+END_SRC

***** Scenarios
- (tr (td name))
- (tr (td name) (td age))
- (tr style (td style name) (td style age))
****** Flow
- (tr (td name))
  - get atom, create element, get next list (tr, get td)
    - get atom, create element, add any atoms as text nodes (td name)
  - append child element to this level element (tr + td)
- (tr (td name) (td age)) - should the tds be wrapped in a container list? Prolly not needed bc cdr
  - get atom, create element, get next list (tr, get td)
    - get atom, create element, add any atoms as text nodes (td name)
  - append child element to this level element (tr + td)
- (tr :style "my-style" (td :style "my-style" name) (td :style "my-style" age)) <-- make attributes keywords, and text are strings
  - go through each element in the list ...
    - (car list) - create element!
sampleTd.setAttribute("style", "background-color: Green;"))
    - (stringp & atom) - create text node! (to current element)
    - (listp) - recursive call! then add to current element!

* commented out code:
                                          #||
                                         ((and (keywordp (car tags)) (stringp (cadr tags)))
(format nil " ~a=\"~a\" ~a" (car tags) (cadr tags)
             (lisp->js-html-fn-deep (cddr tags)))
                                        ;    ||#

* what code might look like
** what we can do today with ps
#+BEGIN_SRC 
(defun render-name-list ()
  (ps
    (defun render-name-list (names)
      (chain names (map
                    #'(lambda (name)
                        (let ((sample-table (chain document (get-element-by-id "sample-table")))
                              (sample-tr (chain document (create-element "tr")))
                              (sample-td (chain document (create-element "td")))
                              (sample-node (chain document (create-text-node (@ name name)))))
                          (chain sample-td (append-child sample-node))
                          (chain sample-tr (append-child sample-td))
                          (chain sample-table (append-child sample-tr)))))))))
#+END_SRC

* example of lisp macro (using ps - with wrapper fn)
#+BEGIN_SRC lisp
(defmacro nexterly-macro (&body tags)
  (let* ((tag (caar tags))
         (tag-text (string tag))
         (element-name (make-symbol (concatenate 'string "element" tag-text))))
    `(ps
       (defun nexter-fn ()
         (let ((,element-name (chain document (create-element ,(string-downcase tag-text)))))
           ,element-name)))))
   
(defun nexterly-fn ()
  (nexterly-macro
    (tr)))
#+END_SRC

* Ideas in English
** Given
(tr (td :style "color:green" "John"))
** Produce JS:
(defun lisp->js&html
(cond
((listp (car tags) (lisp->js&html (car tags) (cdr tags)))
((atom (car tags))
 create element
 append to parent (how??)
   maybe return multiple values with a flag "needs parent"??
  OR, we could return the created element and the receive could maybe check?
myObject instanceOf Element => returns boolean
)))

* Syntax Idea
(jsx-macro
 (tr (td style "color:green;" (ps (alert "hello!"))))) ; only insert parenscript??

function createElements(parentElement) {
    var tableElement796 = createAnElement(parentElement, \"TABLE\");\n    var trElement797 = createAnElement(tableElement796, \"TR\");\n    var tdElement798 = createAnElement(trElement797, \"TD\");\n    setAnAttribute(tdElement798, \"STYLE\", \"color:green;\");\n    setTextNode(tdElement798, \"John\");\n    var tdElement799 = createAnElement(trElement797, \"TD\");\n    setAnAttribute(tdElement799, \"ONCLICK\", \"testClickHandler()\");\n    setTextNode(tdElement799, \"Bill\");\n    __PS_MV_REG = [];\n    return parentElement;\n};\n(function () {\n    var parentElement = document.getElementById(\"parent123\");\n    __PS_MV_REG = [];\n    return createElements(parentElement);\n})();";

function renderTodoList() {
    var todoListDiv = document.getElementById("todo-list");
    return todoList.map(function (todo) {
        __PS_MV_REG = [];
        return "function createElements(parentElement) {
                  var trElement815 = createAnElement(parentElement, \"TR\");
                  var tdElement816 = createAnElement(trEle\ment815, \"TD\");
                  setTextNode(tdElement816, todo);
                  return parentElement;
                };
                var parentElement = document.getElementById(\"todo-list\\");
                createElements(parentElement);";
    });
};

// what it should look like...
function renderTodoList() {
    var todoListDiv = document.getElementById("todo-list");
    return todoList.map(function (todo) { <-- maybe put this part into the macro??
           var parentElement = document.getElementById("whatever the parent Id is");
           var trElement815 = createAnElement(parentElement, \"TR\");
           var tdElement816 = createAnElement(trEle\ment815, \"TD\");
           setTextNode(tdElement816, todo);
           // I don't care about this part - probably doesn't hurt anything, though           return parentElement;
      });
};


function someFunction() {
    var list = ["abc", "def", "ghi"];
    return list.map(function (item) {
        var myList =
 (setAnAttribute(tdElement701, "STYLE", "color:blue;"), setTextNode(tdElement701, "John"))
(setTextNode(tdElement702, "Bill"));
        __PS_MV_REG = [];
        return null;
    });
};

(1 . "test")
(1 . (test))
(1 . (test 123))
(tr (td))

(defun cons-pair-p (possible-cons)
  (or
   (and (consp possible-cons) (atom (cdr possible-cons)))
   (and (consp possible-cons) (listp (cdr possible-cons)) (not (and (= 1 length) (listp (car (cdr possible-cons))))))))

(let* ((j '(1 . (some-function)))
                       (cdrj (cdr j)))
                  (and (listp cdrj)
                       (or
                        (and (= (length cdrj) 1) (not (listp (car cdrj))))
                        (and (> (length cdrj) 1) (not (listp (car cdrj))))

* Test 1 2 3
** Sub Test  1 2 3

* Test 2
** Sub Test 123

| ideal                | "(update-todo (chain index (to-string)))"             | how do you eval for parentscript then put that result in a string? |
| works                | "(+ \"updateTodo(\" (chain index (to-string)) \")\")" | ugly / hard-to-read                                                |
| string interpolation | $"updateTodo({index})"                                | might be easy to do with a reader macro; non-lispy?                |
|                      |                                                       |                                                                    |
|                      |                                                       |                                                                    |
|                      |                                                       |                                                                    |
what about something like ...

can we transform this: ="(update-todo (chain index (to-string)))"=
... into this:
=(chain parent-elment-id (add-event-listener "click" (chain update-todo (bind null index)) false))=
- "click" is the key minus leading "on"
-  (chain update-todo (bind null index)) should eval as normal parentscript
(update-todo (chain index (to-string)))
(chain update-todo (bind null index))
(fun-name param1 param2)
(chain fun-name (bind null param1 param2))
(chain parent-elment-id (add-event-listener "key" (chain fun-name (bind null param1 param2)) false))
You don't even need regex because everything is already a form!!!

idea - can the attribute value just be the call to "addEventListener"??? (probably not?)
